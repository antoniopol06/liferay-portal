{"version":3,"sources":["/source/map.es.js"],"names":[],"mappingsmBA,UAAQ,GAAR,CAAY,QAAZ;AACA,MAAI,OAAO,EAAP;;oBAEW","sourcesContent":["// AUI.add(\n// \t'liferay-map-common',\n// \tfunction(A) {\n// \t\tvar Lang = A.Lang;\n\n// \t\tvar STR_CONTROLS = 'controls';\n\n// \t\tvar TPL_HOME_BUTTON = '<button class=\"btn btn-default home-button\">' +\n// \t\t\t\t'<i class=\"glyphicon glyphicon-screenshot\"></i>' +\n// \t\t\t'</button>';\n\n// \t\tvar TPL_SEARCHBOX = '<div class=\"col-md-6 search-controls\">' +\n// \t\t\t\t'<input class=\"search-input\" placeholder=\"\" type=\"text\" />' +\n// \t\t\t'</div>';\n\n// \t\tvar GeojsonBase = function() {\n// \t\t};\n\n// \t\tA.mix(\n// \t\t\tGeojsonBase,\n// \t\t\t{\n// \t\t\t\tATTRS: {\n// \t\t\t\t\tmap: {\n// \t\t\t\t\t\tvalidator: Lang.isObject\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\tNAME: 'lfrmapgeojsonbase',\n\n// \t\t\t\tNS: 'lfrmapgeojsonbase',\n\n// \t\t\t\tprototype: {\n// \t\t\t\t\taddData: function(data) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar nativeFeatures = instance._addData(data);\n\n// \t\t\t\t\t\tif (nativeFeatures.length) {\n// \t\t\t\t\t\t\tvar features = nativeFeatures.map(instance._wrapNativeFeature, instance);\n\n// \t\t\t\t\t\t\tinstance.fire(\n// \t\t\t\t\t\t\t\t'featuresAdded',\n// \t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\tfeatures: features\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_onFeatureClick: function(event) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tinstance.fire(\n// \t\t\t\t\t\t\t'featureClick',\n// \t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\tfeature: instance._wrapNativeFeature(event)\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t},\n// \t\t\ttrue\n// \t\t);\n\n// \t\tvar MarkerBase = function() {\n// \t\t};\n\n// \t\tA.mix(\n// \t\t\tMarkerBase,\n// \t\t\t{\n// \t\t\t\tATTRS: {\n// \t\t\t\t\tlocation: {\n// \t\t\t\t\t\tvalidator: Lang.isObject,\n// \t\t\t\t\t\tvalue: {\n// \t\t\t\t\t\t\tlat: 0,\n// \t\t\t\t\t\t\tlng: 0\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\tmap: {\n// \t\t\t\t\t\tvalidator: Lang.isObject\n// \t\t\t\t\t},\n\n// \t\t\t\t\tnativeMarker: {\n// \t\t\t\t\t\treadOnly: true,\n// \t\t\t\t\t\tvalidator: Lang.isObject\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\tNAME: 'lfrmapmarkerbase',\n\n// \t\t\t\tNS: 'lfrmapmarkerbase',\n\n// \t\t\t\tprototype: {\n// \t\t\t\t\tinitializer: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar location = instance.get('location');\n\n// \t\t\t\t\t\tvar map = instance.get('map');\n\n// \t\t\t\t\t\tvar nativeMarker = instance._createNativeMarker(location, map);\n\n// \t\t\t\t\t\tinstance._bindNativeMarker(nativeMarker);\n\n// \t\t\t\t\t\tinstance._set('nativeMarker', nativeMarker);\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_getNativeEventFn: function(eventType) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar nativeEventFn = instance['_onNative' + eventType + 'Fn'];\n\n// \t\t\t\t\t\tif (!nativeEventFn) {\n// \t\t\t\t\t\t\tnativeEventFn = A.rbind('_onNativeEvent', instance, eventType);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\treturn nativeEventFn;\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_onNativeEvent: function(nativeEvent, eventType) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar normalizedEvent = instance._normalizeEvent(nativeEvent);\n\n// \t\t\t\t\t\tnormalizedEvent.nativeEvent = nativeEvent;\n\n// \t\t\t\t\t\tinstance.fire(eventType, normalizedEvent);\n// \t\t\t\t\t}\n// \t\t\t\t}\n// \t\t\t},\n// \t\t\ttrue\n// \t\t);\n\n// \t\tvar Base = function() {\n// \t\t};\n\n// \t\tA.mix(\n// \t\t\tBase,\n// \t\t\t{\n// \t\t\t\tATTRS: {\n// \t\t\t\t\tcontrols: {\n// \t\t\t\t\t\tvalidator: Array.isArray,\n// \t\t\t\t\t\tvalue: [\n// \t\t\t\t\t\t\t'Base.CONTROLS.PAN',\n// \t\t\t\t\t\t\t'Base.CONTROLS.TYPE',\n// \t\t\t\t\t\t\t'Base.CONTROLS.ZOOM'\n// \t\t\t\t\t\t]\n// \t\t\t\t\t},\n\n// \t\t\t\t\tdata: {\n// \t\t\t\t\t\tvalidator: Lang.isObject\n// \t\t\t\t\t},\n\n// \t\t\t\t\tgeolocation: {\n// \t\t\t\t\t\tvalidator: Lang.isBoolean,\n// \t\t\t\t\t\tvalue: false\n// \t\t\t\t\t},\n\n// \t\t\t\t\tposition: {\n// \t\t\t\t\t\tvalidator: Lang.isObject,\n// \t\t\t\t\t\tvalue: {\n// \t\t\t\t\t\t\tlocation: {\n// \t\t\t\t\t\t\t\tlat: 0,\n// \t\t\t\t\t\t\t\tlng: 0\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\tzoom: {\n// \t\t\t\t\t\tvalidator: Lang.isNumber,\n// \t\t\t\t\t\tvalue: 11\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\tCONTROLS: {\n// \t\t\t\t\tATTRIBUTION: 'attribution',\n// \t\t\t\t\tGEOLOCATION: 'geolocation',\n// \t\t\t\t\tHOME: 'home',\n// \t\t\t\t\tOVERVIEW: 'overview',\n// \t\t\t\t\tPAN: 'pan',\n// \t\t\t\t\tROTATE: 'rotate',\n// \t\t\t\t\tSCALE: 'scale',\n// \t\t\t\t\tSEARCH: 'search',\n// \t\t\t\t\tSTREETVIEW: 'streetview',\n// \t\t\t\t\tTYPE: 'type',\n// \t\t\t\t\tZOOM: 'zoom'\n// \t\t\t\t},\n\n// \t\t\t\tNAME: 'lfrmapbase',\n\n// \t\t\t\tNS: 'lfrmapbase',\n\n// \t\t\t\tPOSITION: {\n// \t\t\t\t\tBOTTOM: 11,\n// \t\t\t\t\tBOTTOM_CENTER: 11,\n// \t\t\t\t\tBOTTOM_LEFT: 10,\n// \t\t\t\t\tBOTTOM_RIGHT: 12,\n// \t\t\t\t\tCENTER: 13,\n// \t\t\t\t\tLEFT: 5,\n// \t\t\t\t\tLEFT_BOTTOM: 6,\n// \t\t\t\t\tLEFT_CENTER: 4,\n// \t\t\t\t\tLEFT_TOP: 5,\n// \t\t\t\t\tRIGHT: 7,\n// \t\t\t\t\tRIGHT_BOTTOM: 9,\n// \t\t\t\t\tRIGHT_CENTER: 8,\n// \t\t\t\t\tRIGHT_TOP: 7,\n// \t\t\t\t\tTOP: 2,\n// \t\t\t\t\tTOP_CENTER: 2,\n// \t\t\t\t\tTOP_LEFT: 1,\n// \t\t\t\t\tTOP_RIGHT: 3\n// \t\t\t\t},\n\n// \t\t\t\tprototype: {\n// \t\t\t\t\tinitializer: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar position = instance.get('position');\n\n// \t\t\t\t\t\tvar location = position && position.location ? position.location : {};\n\n// \t\t\t\t\t\tif (!location.lat || !location.lng) {\n// \t\t\t\t\t\t\tLiferay.Util.getGeolocation(\n// \t\t\t\t\t\t\t\tfunction(latitude, longitude) {\n// \t\t\t\t\t\t\t\t\tvar location = {\n// \t\t\t\t\t\t\t\t\t\tlat: latitude,\n// \t\t\t\t\t\t\t\t\t\tlng: longitude\n// \t\t\t\t\t\t\t\t\t};\n\n// \t\t\t\t\t\t\t\t\tinstance._initializeLocation(location);\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t\telse {\n// \t\t\t\t\t\t\tinstance._initializeLocation(location);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\tbindUI: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tinstance._eventHandles = [\n// \t\t\t\t\t\t\tinstance.on('positionChange', A.bind('_onPositionChange', instance))\n// \t\t\t\t\t\t];\n// \t\t\t\t\t},\n\n// \t\t\t\t\tdestructor: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar geojsonLayer = instance._geojsonLayer;\n\n// \t\t\t\t\t\tif (geojsonLayer) {\n// \t\t\t\t\t\t\tgeojsonLayer.destroy();\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tif (instance._customControls) {\n// \t\t\t\t\t\t\tvar searchControl = instance._customControls[Base.CONTROLS.SEARCH];\n\n// \t\t\t\t\t\t\tif (searchControl) {\n// \t\t\t\t\t\t\t\tsearchControl.destroy();\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\t(new A.EventHandle(instance._eventHandles)).detach();\n// \t\t\t\t\t},\n\n// \t\t\t\t\taddMarker: function(location) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar MarkerImpl = instance.MarkerImpl;\n\n// \t\t\t\t\t\tif (MarkerImpl) {\n// \t\t\t\t\t\t\treturn new MarkerImpl(\n// \t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\tlocation: location,\n// \t\t\t\t\t\t\t\t\tmap: instance._map\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\tgetNativeMap: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\treturn instance._map;\n// \t\t\t\t\t},\n\n// \t\t\t\t\topenDialog: function(dialogConfig) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tinstance._getDialog().open(dialogConfig);\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_bindUIMB: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar geojsonLayer = instance._geojsonLayer;\n\n// \t\t\t\t\t\tif (geojsonLayer) {\n// \t\t\t\t\t\t\tgeojsonLayer.on(\n// \t\t\t\t\t\t\t\t'featuresAdded',\n// \t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\tvar bounds = instance.getBounds();\n\n// \t\t\t\t\t\t\t\t\tvar features = event.features;\n\n// \t\t\t\t\t\t\t\t\tif (features.length > 1) {\n// \t\t\t\t\t\t\t\t\t\tevent.features.forEach(\n// \t\t\t\t\t\t\t\t\t\t\tfunction(item, index) {\n// \t\t\t\t\t\t\t\t\t\t\t\tbounds.extend(item.getGeometry().get());\n// \t\t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t\t);\n\n// \t\t\t\t\t\t\t\t\t\tinstance.fitBounds(bounds);\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\telse {\n// \t\t\t\t\t\t\t\t\t\tinstance.set(\n// \t\t\t\t\t\t\t\t\t\t\t'position',\n// \t\t\t\t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\t\t\t\tlocation: features[0].getGeometry().get()\n// \t\t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n\n// \t\t\t\t\t\t\tgeojsonLayer.on(\n// \t\t\t\t\t\t\t\t'featureClick',\n// \t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\tinstance.fire(\n// \t\t\t\t\t\t\t\t\t\t'featureClick',\n// \t\t\t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\t\t\tfeature: event.feature\n// \t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tvar geolocationMarker = instance._geolocationMarker;\n\n// \t\t\t\t\t\tif (geolocationMarker) {\n// \t\t\t\t\t\t\tgeolocationMarker.on(\n// \t\t\t\t\t\t\t\t'dragend',\n// \t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\tvar geocoder = instance._getGeocoder();\n\n// \t\t\t\t\t\t\t\t\tgeocoder.reverse(\n// \t\t\t\t\t\t\t\t\t\tevent.location,\n// \t\t\t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\t\t\tinstance.set('position', event.data);\n// \t\t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t\t);\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tvar customControls = instance._customControls;\n\n// \t\t\t\t\t\tvar homeControl = customControls[Base.CONTROLS.HOME];\n\n// \t\t\t\t\t\tif (homeControl) {\n// \t\t\t\t\t\t\thomeControl.on('click', instance._onHomeButtonClick, instance);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tvar searchControl = customControls[Base.CONTROLS.SEARCH];\n\n// \t\t\t\t\t\tif (searchControl) {\n// \t\t\t\t\t\t\tsearchControl.on(\n// \t\t\t\t\t\t\t\t'search',\n// \t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\tinstance.set('position', event.position);\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_createCustomControls: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar controls = instance.get(STR_CONTROLS);\n\n// \t\t\t\t\t\tvar customControls = {};\n\n// \t\t\t\t\t\tif (controls.indexOf(Base.CONTROLS.HOME) !== -1) {\n// \t\t\t\t\t\t\tvar homeControl = A.Node.create(TPL_HOME_BUTTON);\n\n// \t\t\t\t\t\t\tcustomControls[Base.CONTROLS.HOME] = homeControl;\n\n// \t\t\t\t\t\t\tinstance.addControl(homeControl, Base.POSITION.RIGHT_BOTTOM);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tif (controls.indexOf(Base.CONTROLS.SEARCH) !== -1) {\n// \t\t\t\t\t\t\tvar SearchImpl = instance.SearchImpl;\n\n// \t\t\t\t\t\t\tif (SearchImpl) {\n// \t\t\t\t\t\t\t\tvar searchControl = A.Node.create(TPL_SEARCHBOX);\n\n// \t\t\t\t\t\t\t\tcustomControls[Base.CONTROLS.SEARCH] = new SearchImpl(\n// \t\t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\t\tinputNode: searchControl.one('input')\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t);\n\n// \t\t\t\t\t\t\t\tinstance.addControl(searchControl, Base.POSITION.TOP_LEFT);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tinstance._customControls = customControls;\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_getControlsConfig: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar controls = instance.get(STR_CONTROLS);\n\n// \t\t\t\t\t\tvar availableControls = controls.map(\n// \t\t\t\t\t\t\tfunction(item, index) {\n// \t\t\t\t\t\t\t\treturn Lang.isString(item) ? item : item.name;\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n\n// \t\t\t\t\t\tvar config = {};\n\n// \t\t\t\t\t\tA.Object.each(\n// \t\t\t\t\t\t\tinstance.CONTROLS_CONFIG_MAP,\n// \t\t\t\t\t\t\tfunction(item, index) {\n// \t\t\t\t\t\t\t\tvar controlIndex = availableControls.indexOf(index);\n\n// \t\t\t\t\t\t\t\tif (controlIndex > -1) {\n// \t\t\t\t\t\t\t\t\tvar controlConfig = controls[controlIndex];\n\n// \t\t\t\t\t\t\t\t\tif (Lang.isObject(controlConfig) && controlConfig.cfg) {\n// \t\t\t\t\t\t\t\t\t\tconfig[item + 'Options'] = controlConfig.cfg;\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t}\n\n// \t\t\t\t\t\t\t\tconfig[item] = controlIndex !== -1;\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n\n// \t\t\t\t\t\treturn config;\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_getDialog: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar dialog = instance._dialog;\n\n// \t\t\t\t\t\tif (!dialog) {\n// \t\t\t\t\t\t\tvar DialogImpl = instance.DialogImpl;\n\n// \t\t\t\t\t\t\tif (DialogImpl) {\n// \t\t\t\t\t\t\t\tdialog = new DialogImpl(\n// \t\t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\t\tmap: instance._map\n// \t\t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t\t);\n\n// \t\t\t\t\t\t\t\tinstance._dialog = dialog;\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\treturn dialog;\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_getGeocoder: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar geocoder = instance._geocoder;\n\n// \t\t\t\t\t\tif (!geocoder) {\n// \t\t\t\t\t\t\tvar GeoCoderImpl = instance.GeocoderImpl;\n\n// \t\t\t\t\t\t\tif (GeoCoderImpl) {\n// \t\t\t\t\t\t\t\tgeocoder = new GeoCoderImpl();\n\n// \t\t\t\t\t\t\t\tinstance._geocoder = geocoder;\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\treturn geocoder;\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_initializeGeojsonData: function() {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar data = instance.get('data');\n\n// \t\t\t\t\t\tif (data && instance._geojsonLayer) {\n// \t\t\t\t\t\t\tinstance._geojsonLayer.addData(data);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_initializeLocation: function(location) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tif (instance.get('geolocation') && instance.GeocoderImpl) {\n// \t\t\t\t\t\t\tvar geocoder = instance._getGeocoder();\n\n// \t\t\t\t\t\t\tgeocoder.reverse(\n// \t\t\t\t\t\t\t\tlocation,\n// \t\t\t\t\t\t\t\tfunction(event) {\n// \t\t\t\t\t\t\t\t\tinstance._initializeMap(event.data);\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t\telse {\n// \t\t\t\t\t\t\tinstance._initializeMap(\n// \t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\tlocation: location\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_initializeMap: function(position) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar location = position.location;\n\n// \t\t\t\t\t\tinstance._originalPosition = position;\n\n// \t\t\t\t\t\tvar controlsConfig = instance._getControlsConfig();\n\n// \t\t\t\t\t\tinstance._map = instance._createMap(location, controlsConfig);\n\n// \t\t\t\t\t\tif (instance.get('geolocation')) {\n// \t\t\t\t\t\t\tinstance._geolocationMarker = instance.addMarker(location);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tvar GeojsonImpl = instance.GeojsonImpl;\n\n// \t\t\t\t\t\tif (GeojsonImpl) {\n// \t\t\t\t\t\t\tinstance._geojsonLayer = new GeojsonImpl(\n// \t\t\t\t\t\t\t\t{\n// \t\t\t\t\t\t\t\t\tmap: instance._map\n// \t\t\t\t\t\t\t\t}\n// \t\t\t\t\t\t\t);\n// \t\t\t\t\t\t}\n\n// \t\t\t\t\t\tinstance.set('position', position);\n\n// \t\t\t\t\t\tinstance._createCustomControls();\n// \t\t\t\t\t\tinstance._bindUIMB();\n// \t\t\t\t\t\tinstance._initializeGeojsonData();\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_onHomeButtonClick: function(event) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tevent.preventDefault();\n\n// \t\t\t\t\t\tinstance.set('position', instance._originalPosition);\n// \t\t\t\t\t},\n\n// \t\t\t\t\t_onPositionChange: function(event) {\n// \t\t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\t\tvar location = event.newVal.location;\n\n// \t\t\t\t\t\tinstance.setCenter(location);\n\n// \t\t\t\t\t\tvar geolocationMarker = instance._geolocationMarker;\n\n// \t\t\t\t\t\tif (geolocationMarker) {\n// \t\t\t\t\t\t\tgeolocationMarker.setPosition(location);\n// \t\t\t\t\t\t}\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\tget: function(id, callback) {\n// \t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\tvar map = Liferay.component(id);\n\n// \t\t\t\t\tif (map) {\n// \t\t\t\t\t\tcallback(map);\n// \t\t\t\t\t}\n// \t\t\t\t\telse {\n// \t\t\t\t\t\tvar pendingCallbacks = instance._pendingCallbacks[id] || [];\n\n// \t\t\t\t\t\tpendingCallbacks.push(callback);\n\n// \t\t\t\t\t\tinstance._pendingCallbacks[id] = pendingCallbacks;\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\tregister: function(id, map) {\n// \t\t\t\t\tvar instance = this;\n\n// \t\t\t\t\tLiferay.component(id, map);\n\n// \t\t\t\t\tvar pendingCallback = instance._pendingCallbacks[id];\n\n// \t\t\t\t\tif (pendingCallback) {\n// \t\t\t\t\t\tpendingCallback.forEach(\n// \t\t\t\t\t\t\tfunction(item, index) {\n// \t\t\t\t\t\t\t\titem(map);\n// \t\t\t\t\t\t\t}\n// \t\t\t\t\t\t);\n// \t\t\t\t\t}\n// \t\t\t\t},\n\n// \t\t\t\t_pendingCallbacks: {}\n// \t\t\t},\n// \t\t\ttrue\n// \t\t);\n// \t\tconsole.log('LIFERAY MAPBASE');\n// \t\tLiferay.MapBase = Base;\n// \t\tLiferay.MapGeojsonBase = GeojsonBase;\n// \t\tLiferay.MapMarkerBase = MarkerBase;\n// \t},\n// \t'',\n// \t{\n// \t\trequires: ['aui-base']\n// \t}\n// );\n\n\nconsole.log('COMMON');\nvar Maps = {};\n\nexport default Maps;"]}